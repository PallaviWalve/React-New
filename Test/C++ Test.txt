
Placement Preparation - PG-DAC - C++ Programming Test - 3
Test Timings - 6:00 PM to 7:30 PM

The Link will close at 7:30 PM
walvepallavi02@gmail.com Switch account
 
Draft saved
* Indicates required question
Email
*
walvepallavi02@gmail.com
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

// node data type
struct Node {
	Node* left;
	Node* right;
	int hd;
	int data;
};

// utility function to create new node
Node* newNode(int key)
{
	Node* node = new Node();
	node->left = node->right = NULL;
	node->data = key;
	return node;
}

// function to print top view of a binary tree
void topView(Node* root)
{
	if (root == NULL) {
		return;
	}
	queue<Node*> q;
	map<int, int> m;
	int hd = 0;
	root->hd = hd;

	q.push(root);

	while (q.size()) {
		hd = root->hd;

		if (m.count(hd) == 0)
			m[hd] = root->data;
		if (root->left) {
			root->left->hd = hd - 1;
			q.push(root->left);
		}
		if (root->right) {
			root->right->hd = hd + 1;
			q.push(root->right);
		}
		q.pop();
		root = q.front();
	}

	// printing top view
	for (auto i = m.begin(); i != m.end(); i++) {
		cout << i->second << " ";
	}
}

// Driver code
int main()
{
	// new binary tree
	Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->right->right = newNode(5);

	topView(root);
	return 0;
}

1 point
4 2 1 3 5
2 3 4 1 5
3 4 5 1 2
4 2 1 5 3
What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    int main()
    {
        enum channel {star, sony, zee};
        enum symbol {hash, star};
        int i = 0;
        for (i = star; i <= zee; i++)
        {
            printf("%d ", i);
        }
        return 0;
    }
1 point
a) 012
b) 123
c) compile time error
d) runtime error
What will happen when we use void in argument passing?

1 point
a) It will not return value to its caller
b) It will return value to its caller
c) Maybe or may not be return any value to its caller
d) It will return value with help of object
Find the complexity of the following code:

void averager(int[] A) {

      float avg = 0.0f;
      int j, count;

      for (j = 0; j < A.length; j++) {
         avg += A[j];
      }

    avg = avg / A.length;

    count = j = 0;

   do {

      while (j < A.length && A[j] != avg) {
             j++;
      }

      if (j < A.length) {
              A[j++] = 0;
               count++;
      }
  } while (j < A.length);
}
1 point
O(2n)
O(n)
O(fn)
Overflow Length Error
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

// infix to postfix conversion
// supported operators => + - * /
string infixToPostfix(string& expression)
{
	// string to store postfix expression
	string postfix;
	// operator stack
	stack<char> ope_stack;
	// operator precedence map
	unordered_map<char, int> pre = { { '+', 1 },
									{ '-', 1 },
									{ '*', 2 },
									{ '/', 2 },
									{ '(', 0 } };

	int length = expression.length();

	for (int i = 0; i < length; i++) {
		char c = expression[i];
		// checking operands
		if ((c >= 92 && c <= 122) || (c >= 48 && c <= 57)) {
			postfix.push_back(c);
		}
		// checking braces
		else if (c == '(') {
			ope_stack.push(c);
		}
		else if (c == ')') {
			while (ope_stack.top() != '(') {
				postfix.push_back(ope_stack.top());
				ope_stack.pop();
			}
			ope_stack.pop();
		}
		// checking operators
		else {
			while (!ope_stack.empty()
				&& pre.at(c) < pre.at(ope_stack.top())) {
				postfix.push_back(ope_stack.top());
				ope_stack.pop();
			}
			ope_stack.push(c);
		}
	}

	// popping whole stack at the end
	while (!ope_stack.empty()) {
		postfix.push_back(ope_stack.top());
		ope_stack.pop();
	}

	return postfix;
}

// driver code
int main()
{
	string s = "a*b+(c-d)";
	cout << infixToPostfix(s);

	return 0;
}

1 point
ab*cd-+
ab*cd-*
ab+cd*+
Error
Name:
*
Pallavi Rajaram Walve
Which reference modifier is used to define the reference variable?
1 point
a) &
b) $
c) #
d) @
What will be the output of the following C++ code?

 #include <iostream>
    using namespace std;
    void copy (int& a, int& b, int& c)
    {
        a *= 2;
        b *= 2;
        c *= 2;
    }
    int main ()
    {
        int x = 1, y = 3, z = 7;
        copy (x, y, z);
        cout << "x =" << x << ", y =" << y << ", z =" << z;
        return 0;
    }
1 point
a) 2 5 10
b) 2 4 5
c) 2 6 14
d) 2 4 9
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
and a pointer to right child */
struct Node {
	int data;
	struct Node *left, *right;
};

// Utility function to create a new tree node
Node* newNode(int data)
{
	Node* temp = new Node;
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}

/* Given a binary tree, print its nodes in preorder*/
void printPreorder(struct Node* node)
{
	if (node == NULL)
		return;

	/* first print data of node */
	cout << node->data << " ";

	/* then recur on left subtree */
	printPreorder(node->left);

	/* now recur on right subtree */
	printPreorder(node->right);
}

int main()
{
	struct Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);

	// Function call
	cout << "Preorder traversal of binary tree is \n";
	printPreorder(root);

	return 0;
}

1 point
3 2 5 4 1
1 4 3 2 5
1 3 2 4 5
1 2 4 5 3
What would be the output of the following program -


#include <iostream>
using namespace std;

// Function to convert an
// Octal to Binary Number
string OctToBin(string octnum)
{
	long int i = 0;

	string binary = "";

	while (octnum[i]) {
		switch (octnum[i]) {
		case '0':
			binary += "000";
			break;
		case '1':
			binary += "001";
			break;
		case '2':
			binary += "010";
			break;
		case '3':
			binary += "011";
			break;
		case '4':
			binary += "100";
			break;
		case '5':
			binary += "101";
			break;
		case '6':
			binary += "110";
			break;
		case '7':
			binary += "111";
			break;
		default:
			cout << "\nInvalid Octal Digit " << octnum[i];
			break;
		}
		i++;
	}

	return binary;
}

// Driver code
int main()
{
	// Get the Hexadecimal number
	string octnum = "345";

	// Convert Octal to Binary
	cout << "Equivalent Binary Value = "
		<< OctToBin(octnum);

	return 0;
}

1 point
Equivalent Binary Value = 011100100
Equivalent Binary Value = 011100101
Equivalent Binary Value = 000100101
Equivalent Binary Value = 011110101
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

// node data type
struct Node {
	Node* left;
	Node* right;
	int data;
	int hd;
};

// utility function for new node
Node* newNode(int key)
{
	Node* node = new Node();
	node->data = key;
	node->left = node->right = NULL;
	node->hd = 0;

	return node;
}

// function to print bottom view
void bottomView(Node* root)
{
	if (root == NULL)
		return;

	queue<Node*> q;
	map<int, int> m;

	int hd = 0;

	root->hd = hd;
	q.push(root);

	while (!q.empty()) {
		Node* temp = q.front();
		q.pop();

		hd = temp->hd;

		m[hd] = temp->data;

		if (temp->left != NULL) {
			temp->left->hd = hd - 1;
			q.push(temp->left);
		}

		if (temp->right != NULL) {
			temp->right->hd = hd + 1;
			q.push(temp->right);
		}
	}

	// printing top view
	for (auto i = m.begin(); i != m.end(); ++i)
		cout << i->second << " ";
}

// Driver Code
int main()
{
	Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->right->right = newNode(5);

	bottomView(root);
	return 0;
}

1 point
4 2 3 1 5
5 1 3 2 1
3 5 2 1 4
4 2 1 3 5
What will be the output of the following C++ code?

 #include <stdio.h>
    #include<iostream>
    using namespace std;
    int main ()
    {
        int array[] = {0, 2, 4, 6, 7, 5, 3};
        int n, result = 0;
        for (n = 0; n < 8; n++)
        {
            result += array[n];
        }
        cout << result;
        return 0;
    }
1 point
21
23
24
27
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

// node datatype
struct Node {
	Node* left;
	Node* right;
	int data;
};

// utility function to create a new node
Node* newNode(int key)
{
	Node* node = new Node;
	node->data = key;
	node->left = node->right = NULL;
	return node;
}

// function to print left view
void leftView(Node* root)
{
	if (!root) {
		return;
	}

	queue<Node*> q;
	q.push(root);

	while (!q.empty()) {
		int n = q.size();

		for (int i = 1; i <= n; i++) {
			Node* temp = q.front();
			q.pop();

			if (i == 1)
				cout << temp->data << " ";

			if (temp->left != NULL)
				q.push(temp->left);

			if (temp->right != NULL)
				q.push(temp->right);
		}
	}
}

// Driver code
int main()
{

	Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->right->right = newNode(5);

	leftView(root);
}

1 point
1 2 4
4 2 1
1 2 2
2 2 4
What would be the output of the following program - 

#include <iostream>
using namespace std;

// Function to sort
void bubbleSort(int arr[], int n)
{
	int i, j;
	for (i = 0; i < n - 1; i++)

		// Last i elements are already
		// in place
		for (j = 0; j < n - i - 1; j++)
			if (arr[j] > arr[j + 1])
				swap(arr[j], arr[j + 1]);
}

// Function to print an array
void printArray(int arr[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		cout << arr[i] << " ";
	cout << endl;
}

int main()
{
	int arr[] = { 3, 1, 4, 2, 5 };
	int N = sizeof(arr) / sizeof(arr[0]);

	bubbleSort(arr, N);

	cout << "Sorted array: ";
	printArray(arr, N);
	return 0;
}

1 point
Unable to Execute
Sorted array: 2 3 4 5
Sorted array: 1 2 3 4
Sorted array: 1 2 3 4 5
What is the range of the floating point numbers?
1 point
a) -3.4E+38 to +3.4E+38
b) -3.4E+38 to +3.4E+34
c) -3.4E+38 to +3.4E+36
d) -3.4E+38 to +3.4E+32
What will be the output of the following C++ code?

  #include <iostream>
    using namespace std;
    void Sum(int a, int b, int & c)
    {
        a = b + c;
        b = a + c;
        c = a + b;
    }
    int main()
    {
        int x = 2, y =3;
        Sum(x, y, y);
        cout << x << " " << y;
        return 0;
    }
1 point
a) 2 3
b) 6 9
c) 2 15
d) compile time error
What will be the output of the following C++ code?

    #include <stdio.h>
    #include <iostream>
    using namespace std;
    int main()
    {
        int array[] = {10, 20, 30};
        cout << -2[array];
        return 0;
    }
1 point
a) -15
b) -30
c) compile time error
d) garbage value
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
and a pointer to right child */
struct Node {
	int data;
	struct Node *left, *right;
};

// Utility function to create a new tree node
Node* newNode(int data)
{
	Node* temp = new Node;
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}

/* Given a binary tree, print its nodes according to the
"bottom-up" postorder traversal. */
void printPostorder(struct Node* node)
{
	if (node == NULL)
		return;

	// first recur on left subtree
	printPostorder(node->left);

	// then recur on right subtree
	printPostorder(node->right);

	// now deal with the node
	cout << node->data << " ";
}

int main()
{
	struct Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);

	// Function call
	cout << "Postorder traversal of binary tree is \n";
	printPostorder(root);

	return 0;
}

1 point
3 4 5 2 1
4 5 2 3 1
3 5 4 1 2
4 5 3 2 1
What will be the output of the following C++ code?

 #include <iostream>
    using namespace std;
    enum  cat
    {
        temp = 7
    };
    int main()
    {
        int age = 14;
        age /= temp;
        cout << "If you were cat, you would be " << age << endl;
        return 0;
    }
1 point
a) If you were cat, you would be 5
b) If you were cat, you would be 2
c) If you were cat, you would be 7
d) If you were cat, you would be 9
What will be the output of the following C++ code?

  #include <iostream>
    using namespace std;
    int add(int a, int b);
    int main()
    {
        int i = 5, j = 6;
        cout << add(i, j) << endl;
        return 0;
    }
    int add(int a, int b )
    {
        int sum = a + b;
        a = 7;
        return a + b;
    }
1 point
a) 11
b) 12
c) 13
d) compile time error
What will be the output of the following C++ code?

  #include <iostream>
    using namespace std;
    void fun(int &x)
    {
        x = 20;
    }
    int main()
    {
         int x = 10;
         fun(x);
         cout << "New value of x is " << x;
         return 0;
    }
1 point
a) 10
b) 20
c) 15
d) 36
What would be the output of this program - 

#include <bits/stdc++.h>
using namespace std;

int compare(const void* a, const void* b)
{
	return (*(char*)a - *(char*)b);
}

void swap(char* a, char* b)
{
	char t = *a;
	*a = *b;
	*b = t;
}

int findCeil(char str[], char first, int l, int h)
{
	int ceilIndex = l;

	for (int i = l + 1; i <= h; i++)
		if (str[i] > first && str[i] < str[ceilIndex])
			ceilIndex = i;

	return ceilIndex;
}

void Permutations(char str[])
{
	int size = strlen(str);

	qsort(str, size, sizeof(str[0]), compare);

	bool isFinished = false;
	while (!isFinished) {
		cout << str << endl;
		int i;

		for (i = size - 2; i >= 0; --i)
			if (str[i] < str[i + 1])
				break;

		if (i == -1)
			isFinished = true;
		else {
			int ceilIndex
				= findCeil(str, str[i], i + 1, size - 1);
			swap(&str[i], &str[ceilIndex]);
			qsort(str + i + 1, size - i - 1, sizeof(str[0]),
				compare);
		}
	}
}

int main()
{
	char str[] = "XYZ";
	Permutations(str);
	return 0;
}

1 point
XYZ XZY YXZ YZX ZXY ZYX
XYZ XZY YXZ YZX ZXY XZY
XYZ XZY XZY YXZ YZX ZXY
XYZ XZY YXZ YZX XZY YXZ
What will be the output of the following C++ code?

 #include <iostream>
    using namespace std;
    enum test
    {
        A = 32, B, C
    };
    int main()
    {
        cout << A << B<< C;
        return 0;
    }
1 point
a) 323334
b) 323232
c) 323130
d) 323134
What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    #define PI 3.14159
    int main ()
    {
        float r = 2;
        float circle;
        circle = 2 * PI * r;
        cout << circle;
        return 0;
    }
1 point
a) 12.5664
b) 13.5664
c) 10
d) 15
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
and a pointer to right child */
struct Node {
	int data;
	struct Node *left, *right;
};

// Utility function to create a new tree node
Node* newNode(int data)
{
	Node* temp = new Node;
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}

/* Given a binary tree, print its nodes according to the
"bottom-up" postorder traversal. */
void printLevelOrder(struct Node* node)
{
	if (node == NULL)
		return;
	queue<struct Node*> q;
	while (node) {
		if (node->left) {
			q.push(node->left);
		}
		if (node->right) {
			q.push(node->right);
		}
		cout << node->data << " ";
		node = q.front();
		q.pop();
	}
}

int main()
{
	struct Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);

	// Function call
	cout << "Levelorder traversal of binary tree is \n";
	printLevelOrder(root);

	return 0;
}

1 point
1 2 3 4 5
1 2 3 5 4
2 3 4 5 1
5 4 3 2 1
What would be the output of the following program -

#include <bits/stdc++.h>
using namespace std;

// node data type
struct Node {
	Node* left;
	Node* right;
	int data;
};

// utility function to create new node
Node* newNode(int key)
{
	Node* node = new Node;
	node->data = key;
	node->left = node->right = NULL;
	return node;
}

// function to print right view of a binary tree
void rightView(Node* root)
{
	if (root == NULL) {
		return;
	}

	queue<Node*> q;
	q.push(root);

	while (!q.empty()) {

		int n = q.size();

		while (n--) {

			Node* x = q.front();
			q.pop();

			if (n == 0) {
				cout << x->data << " ";
			}
			if (x->left) {
				q.push(x->left);
			}
			if (x->right) {
				q.push(x->right);
			}
		}
	}
}

// Driver code
int main()
{

	Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->right->right = newNode(5);

	rightView(root);
}

1 point
1 5 6
1 3 5
3 4 5
Error
What will be the output of the following C++ code?

 #include <iostream>
    using namespace std;
    enum colour
    {
        green, red, blue, white, yellow, pink
    };
    int main()
    {
        cout << green<< red<< blue<< white<< yellow<< pink;
        return 0;
    }
1 point
a) 012345
b) 123456
c) compile time error
d) runtime error
PRN:
*
240347320069
What is the output of this program - 

#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
and a pointer to right child */

struct Node {
	int data;
	struct Node *left, *right;
};

// Utility function to create a new tree node
Node* newNode(int data)
{
	Node* temp = new Node;
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}

/* Given a binary tree, print its nodes in inorder*/
void printInorder(struct Node* node)
{
	if (node == NULL)
		return;

	/* first recur on left child */
	printInorder(node->left);

	/* then print the data of node */
	cout << node->data << " ";

	/* now recur on right child */
	printInorder(node->right);
}

int main()
{
	struct Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);

	// Function call
	cout << "Inorder traversal of binary tree is \n";
	printInorder(root);

	return 0;
}

1 point
4 2 5 1 3
5 3 4 2 1
3 4 5 2 1
4 2 3 5 1
The constants are also called as _____________
1 point
a) const
b) preprocessor
c) literals
d) variables
What will be the output of the following C++ program?

#include <iostream>
using namespace std;
class A{
public:
	A(){
		cout<<"Constructor called\n";
	   }
	~A(){
		cout<<"Destructor called\n";
	    } 
};
int main(int argc, char const *argv[])
{
	A *a = new A[5];
	delete[] a;
	return 0;
}
1 point
a) Segmentation fault
b) “Constructor called” five times and then “Destructor called” five times
c) “Constructor called” five times and then “Destructor called” once
d) Error
What would be the output of the program - 

// in ascending order and second half in descending
#include <iostream>
using namespace std;

void ascDecFunc(int a[], int n)
{
	int temp;
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n / 2; j++) {
			if (a[j] > a[j + 1]) {
				temp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp;
			}
		}

		for (int j = n / 2; j < n - 1; j++) {
			if (a[j] < a[j + 1]) {
				temp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp;
			}
		}
	}

	for (int i = 0; i < n; i++)
		cout << a[i] << " ";
}

int main()
{
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	int len = sizeof(arr) / sizeof(arr[0]);

	ascDecFunc(arr, len);

	return 0;
}

1 point
1 2 3 4 8 7 6 5
1 2 3 4 8 7 5 6
1 2 3 4 5 6 7 8
5 6 7 8 1 2 3 4
How are the constants declared?
1 point
a) const keyword
b) #define preprocessor
c) both const keyword and #define preprocessor
d) $define
What will be the output of the following C++ code?

   #include <iostream>
    using namespace std;
    int main()
    {
        int  const  p = 5;
        cout << ++p;
        return 0;
    }
1 point
5
8
7
Error
What would be the output of the following program - 

#include <iostream>
using namespace std;

class implementAbstraction {
private:
	int p, q;

public:
	// method to set values of
	// private members
	void setter(int x, int y)
	{
		p = x;
		q = y;
	}

	void display()
	{
		cout << "p = " << p << endl;
		cout << "q = " << q << endl;
	}
};

int main()
{
	implementAbstraction obj;

	obj.setter(1, 2);
	obj.display();

	return 0;
}

1 point
p=1 q=2
p=1 q=1
p=2 q=2
q=1 p=2
Which of the following is a valid floating-point literal?
1 point
a) f287.333
b) F287.333
c) 287.e2
d) 287.3.e2
What will be the output of the following C++ code?

  #include <iostream>
    using namespace std;
    int main()
    {
        float num1 = 1.1;
        double num2 = 1.1;
        if (num1 == num2)
           cout << "stanford";
        else
           cout << "harvard";
        return 0;
    }
1 point
a) harvard
b) stanford
c) compile time error
d) runtime error
The difference between x and ‘x’ is?
1 point
a) The first one refers to a variable whose identifier is x and the second one refers to the character constant x
b) The first one is a character constant x and the second one is the string literal x
c) Both are same
d) Both are string literal
What will be the output of the following C++ code?

  #include <iostream>
    using namespace std;
    int main()
    {
        int i;
        enum month
        {
            JAN = 1, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
        };
        for (i = MAR; i <= NOV; i++)
            cout << i;
        return 0;
    }
1 point
a) 01234567891011
b) 123456789101112
c) 34567891011
d) 123456789
What will be the output of the following C++ code?

    #include <stdio.h>
    #include <iostream>
    using namespace std;
    int main()
    {
        char str[5] = "ABC";
        cout << str[3];
        cout << str;
        return 0;
    }
1 point
a) ABC
b) ABCD
c) AB
d) AC
What will be the output of the following C++ code?

  #include <iostream>
    using namespace std;
    long factorial (long a)
    {
        if (a > 1)
            return (a * factorial (a + 1));
        else
            return (1);
    }
    int main ()
    {
        long num = 3;
        cout << num << "! = " << factorial ( num );
        return 0;
    }
1 point
a) 6
b) 24
c) segmentation fault
d) compile time error
Which variable does equals in size with enum variable?
1 point
a) int variable
b) float variable
c) string variable
d) float & string variable
Page 1 of 1
Never submit passwords through Google Forms.
This form was created inside of Mumbai Educational Trust. Report Abuse
Google Forms